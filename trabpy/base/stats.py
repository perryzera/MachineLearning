# -*- coding: utf-8 -*-
"""Olá, este é o Colaboratory

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

import numpy as np

from matplotlib import pyplot as plt
import matplotlib.pyplot as plt

from sklearn.datasets import load_iris
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.neural_network import MLPClassifier

iris = load_iris()

X = iris.data
y = iris.target

x_treino, x_teste, y_treino, y_teste = train_test_split(iris.data, iris.target, random_state=0)

#Decision Tree
clf = DecisionTreeClassifier(max_leaf_nodes = 4, random_state = 0)
clf.fit(x_treino, y_treino)
y_pred = clf.predict(x_teste)

print(f'Previsões DT: {y_pred}')
print(f'Resultados reais: {y_teste}')
cm = confusion_matrix(y_teste, y_pred)

classes = iris.target_names.tolist()
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=classes)

disp.plot()
plt.show()

#KNN
knn_clf = KNeighborsClassifier(n_neighbors=5)
knn_clf.fit(x_treino, y_treino)
knn_y_pred = knn_clf.predict(x_teste)

print(f'Previsões KNN: {knn_y_pred}')
print(f'Resultados reais: {y_teste}')
knn_cm = confusion_matrix(y_teste, knn_y_pred)

classes = iris.target_names.tolist()
disp = ConfusionMatrixDisplay(confusion_matrix=knn_cm, display_labels=classes)

disp.plot()
plt.show()

#SVM
svm_clf = SVC()
svm_clf.fit(x_treino, y_treino)
svm_y_pred = svm_clf.predict(x_teste)

print(f'Previsões SVM: {svm_y_pred}')
print(f'Resultados reais: {y_teste}')

svm_cm = confusion_matrix(y_teste, svm_y_pred)

classes = iris.target_names.tolist()
disp = ConfusionMatrixDisplay(confusion_matrix=svm_cm, display_labels=classes)

disp.plot()
plt.show()

#MLP
mlp_clf = MLPClassifier(hidden_layer_sizes=(10, 10), random_state=0)
mlp_clf.fit(x_treino, y_treino)
mlp_y_pred = mlp_clf.predict(x_teste)

print(f'Previsões MLP: {mlp_y_pred}')
print(f'Resultados reais: {y_teste}')

mlp_cm = confusion_matrix(y_teste, mlp_y_pred)

classes = iris.target_names.tolist()
disp = ConfusionMatrixDisplay(confusion_matrix=mlp_cm, display_labels=classes)
disp.plot()
plt.show()